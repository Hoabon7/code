#include<bits/stdc++.h>
using namespace std;
long long  n,k;
long long mod=1e9+7;
class matran{
	long long  mt[100][100];
	public:
		matran();
		void nhap();
		void xuat();
		matran cong(matran &);
		matran operator*(matran &);
		matran luythua(matran ,long long );
		
};
matran::matran(){
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			mt[i][j]=0;
		}
	}
}
void matran::nhap(){
	for(long long i=0;i<n;i++){
		for(long long  j=0;j<n;j++){
			cin>>mt[i][j];
		}
	}
}
matran matran::cong(matran &b){
	matran c;
	for(long long  i=0;i<n;i++){
		for(long long  j=0;j<n;j++){
			c.mt[i][j]+=mt[i][j]+b.mt[i][j];
		}
	}
	return c;
}
void matran::xuat(){
	for(long long  i=0;i<n;i++){
		for(long long  j=0;j<n;j++){
			cout<<mt[i][j]<<" ";
		}
		cout<<endl;
	}
}
matran matran::operator*(matran &b){
	matran c;
	for(long long i=0;i<n;i++){
		for(long long  j=0;j<n;j++){
			c.mt[i][j]=0;
			for(long long k=0;k<n;k++)
				c.mt[i][j]+=(mt[i][k]*b.mt[k][j])%mod;
		}
	}
	return c;
}
matran matran::luythua(matran b,long long k){
	if(k==1) return b;
	matran c=luythua(b,k/2);
	if(k%2==0&&k>2){
		return c*c;
	}
	else if(k%2!=0&&k>2){
		return luythua(b,k-1);
	}
}
int main(){
	matran a,b;
	cout<<"nhap cap va so mu cua ma tran:"<<endl;
	cin>>n>>k;
	cout<<"nhap ma tran a:"<<endl;
	a.nhap();
	cout<<"ma tran a co dang:"<<endl;
	a.xuat();
	b=a.luythua(a,k);
	b.xuat();	
}

//#include <bits/stdc++.h>
//using namespace std;
// long long mod = 1000000007;
// 
//struct MaTran
//{
//    long long c[2][2];
//    MaTran()
//    {
//        c[0][0]=0;
//        c[0][1]=1;
//        c[1][0]=1;
//        c[1][1]=1;
//    }
//};
// 
//MaTran operator * ( MaTran a,MaTran b)
//{
//    MaTran res;
//    for (int i=0; i<=1; i++)
//        for (int j=0; j<=1; j++)
//        {
//            res.c[i][j] = 0;
//            for (int k=0; k<=1; k++)
//                res.c[i][j] = (res.c[i][j]+a.c[i][k]*b.c[k][j])%mod;
//        }
//    return res;
//}
// 
//MaTran powermod (MaTran a, long long n)
//{
//    if (n==1)
//        return a;
//    if (n%2!=0)
//        return powermod(a,n-1)*a;
//    MaTran tmp = powermod(a,n/2);
//    return tmp*tmp;
//}
//MaTran xuat(MaTran b){
//	for (int i=0; i<=1; i++)
//        for (int j=0; j<=1; j++){
//        	cout<<b.c[i][j]<<" ";
//		}
//		cout<<endl;
//}
// 
//int main()
//{
//    long long n;
//    cin>>n;
//    MaTran A;
//    A = powermod(A,n);
//    xuat(A);
//    cout << A.c[0][1];
//    return 0;
//}
